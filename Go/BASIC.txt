Variables
  Implicit
    VariableName := Value
    var VariableName = Value
  Explicit
    var VariableName <dataType> = Value
    
Console I/O
  Output
    fmt.Printf("xyz %formater",var) 
    var := fmt.Sprintf()
    fmt.Println()
  
  Input
    scanner := bufio.NewScanner(os.Stdin)
    scanner.Scan()
    input := scanner.Text()
    
Convert String 
  strconv.ParseInt("String",Base,Size)
  
Operators
  (Operator dont work on two different type of data in Go)
  Arithmetic + - / * % 
  Comparison < > <= >= != ==
  Condition ! || &&
    
Type Convesion
  DataType(var)
  int()

Conditional Statements
  if condition {
  
  }else if condition {
  
  }else{
  
  }
  
Itratative statements
  for initializer; condition; updation{
  
  }
  
switch statement
  switch <choice>{
    case arg:
      //statement
    case arg:
      //statement
    default:
      //statement
  }
  
Arrays
  1d
    var [size]arr_name
    var arr_name = [size] DataType
    arr_name := [size] datatype{elements,elements,...}
    
  2d
    var arr_name = [row][col] datatype {{element,element,..}{element,element,..}...{}}

  Array functions:
    len(array)

Slices
  var []slice_name = arr_name[startIndex : endIndex]
  
  Slice functions:
    len(slice_name)
    cap(slice_name)
    append(slice_name, element)
    make(arr, size)
    var []s = make([]int, size)

Range
  for i, element := range arr{
     //Code
  }
