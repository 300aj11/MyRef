Redis

  Redis is an open source, in memory data structure.
  Redis can be used as a database or a cache and message broker
  Redis is a NoSQL Key/Value store 
  
  Why use Redis:
    • Very Flexible and Very Fast
    • No Schemas and Column Names
    • Rich Datatype Support
    • Caching and Disk Persistance
    
  Redis supports different kinds of abstract data structures:
  Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values. What this means is that, while in traditional key-value stores you associate string keys to string values, in Redis the value is not limited to a simple string, but can also hold more complex data structures. 
    • Strings
    • Lists
    • Sets
    • Sorted Sets
    • Hashes
    • Bitmaps
    • Hyperlogs
    • Geospatial Indexes

  Redis keys
  Redis keys are binary safe, this means that you can use any binary sequence as a key, from a string like "foo" to the content of a JPEG file. The empty string is also a valid key.
    • Very long keys are not a good idea.
    • Very short keys are often not a good idea.
    • Try to stick with a schema.
    • The maximum allowed key size is 512 MB.
    
  Automatic creation and removal of keys
    When we add an element to an aggregate data type, if the target key does not exist, an empty aggregate data type is created before adding the element.
    When we remove elements from an aggregate data type, if the value remains empty, the key is automatically destroyed. The Stream data type is the only exception to this rule.
    Calling a read-only command such as LLEN (which returns the length of the list), or a write command removing elements, with an empty key, always produces the same result as if the key is holding an empty aggregate type of the type the command expects to find.
    However we can't perform operations against the wrong type if the key exists.

  Strings
    The Redis String type is the simplest type of value you can associate with a Redis key.
    Since Redis keys are strings, when we use the string type as a value too, we are mapping a string to another string.
    Commands:
      • SET key value [option: nx||xx] [ex time]
        sets a value.  
        SET performs an assignment, means SET will replace any existing value already stored into the key, in the case that the key already exists, even if the key is associated with a non-string value.
        The SET command has interesting options, that are provided as additional arguments. For example, I may ask SET to fail if the key already exists, or the opposite, that it only succeed if the key already exists: nx, xx.
      • GET key value 
        get a value
      • GETSET key value
        (set a key-value and return old value if exists)
      
      • INCR key
      • INCRBY key incrementValue
      • DECR key
      • DECRBY key decrementValue
      
      • MSET key1 value1 key2 value2 ....
      • MGET key1 key2......
      
      • EXISTS key
      • TYPE key
      • DEL key
      
      • EXPIRE key time 
      • PERSIST key (remove the expire date)
      • TTL key (return the expire time)
      
  Lists
    Redis lists are implemented via Linked Lists.
    List is just a sequence of ordered elements: 10,20,1,2,3 is a list.
    Commands:
      • LPUSH listName value
        The LPUSH command adds a new element into a list, on the left (at the head)
      • RPUSH listName value
        The RPUSH command adds a new element into a list, on the right (at the tail)
      • LRANGE startIndex endIndex
        The LRANGE command extracts ranges of elements from lists
      • LPOP listName
      • RPOP listName
      • LLEN listname
      
      Capped lists
        • LTRIM listName startIndex endIndex
          The LTRIM command is similar to LRANGE, but instead of displaying the specified range of elements it sets this range as the new list value. All the elements outside the given range are removed.
      
      Blocking operations on lists
      • BLPOP
      • BRPOP
      • LMOVE
      • BLMOVE
      
  Hashes
    Hashes are handy to represent objects, actually the number of fields you can put inside a hash has no practical limits (other than available memory), so you can use hashes in many different ways inside your application.
    Hashes, which are maps composed of fields associated with values. Both the field and the value are strings. 
    
  Sets
    Collections of unique, Unsorted string elements.
    Redis Sets are unordered collections of strings. 
    Sets are good for expressing relations between objects. For instance we can easily use sets in order to implement tags.
    
  Sorted Sets
    Sorted sets are a data type which is similar to a mix between a Set and a Hash. 
    
      
      
