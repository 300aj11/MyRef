Laravel 
	Web Application Framework
	Provides an amazing development experience,
	Provides Powerful features such as:
		thorought dependency injection, 
		an expressive database abstraction layer,
		queues and scheduled jobs,
		unit and integration testing, and more.
	follows MVC (Model View Control) approach

Download and Install "Composer"

Install Laravel
	by typing in terminal: composer global require laravel/installer

Making new laravel project
	go into directory(in cmd) where you want to make a project
	then type : laravel new Project_name
	
Configuration
	Initial : All of the configuration files for the Laravel framework are stored in the config directory.
	Environment Based Configuration at .env file at root.
	# Retrieving Environment Configuration
		'debug' => env('APP_DEBUG', false),
	# Determining The Current Environment
		use Illuminate\Support\Facades\App;
		$environment = App::environment();
		
		if (App::environment('local')) {
    			// The environment is local
		}

		if (App::environment(['local', 'staging'])) {
    			// The environment is either local OR staging...
		}
	# Accessing Configuration Values
		You may easily access your configuration values using the global config helper function from anywhere in your application. The configuration values may be accessed using "dot" syntax, which includes the name of the file and option you wish to access. 
			$value = config('app.timezone');
		To set configuration values at runtime, pass an array to the config helper:
			config(['app.timezone' => 'America/Chicago']);
	
Lifecycle Overview
	# First Steps
		The entry point for all requests to a Laravel application is the public/index.php file.
		The index.php file doesn't contain much code. Rather, it is a starting point for loading the rest of the framework.
	# HTTP / Console Kernels
		Next, the incoming request is sent to either 
			the HTTP kernel or 
			the console kernel, 
		depending on the type of request that is entering the application.
		These two kernels serve as the central location that all requests flow through. 
	# Service Providers
		One of the most important kernel bootstrapping actions is loading the service providers for your application. All of the service providers for the application are configured in the config/app.php configuration file's providers array.
	# Routing
		Once the application has been bootstrapped and all service providers have been registered, the Request will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware.
	# Finishing up
		Once the route or controller method returns a response, the response will travel back outward through the route's middleware, giving the application a chance to modify or examine the outgoing response.

Artisan
	is a command line interface included with laravel.
	it facilitate the project development services.

Run Laravel Project
	php artisan serve

Passing Data to a View
	Route::get('/route', function () {
    	return view('View_name',['Var'=>'value',..]);
	});

Blade
	Accessing variable 
		{{ $variable_name }}

	Directives
		@if()
			//code here
		@elseif()
			//code here
		@else
			//code here
		@endif

		@unless
			//code here
		@endunless

		@php
			//code here
		@endphp

	Loops
		@for(initializer; condition; update)
			//code here
		@endfor

		@foreach($array as $ref)
			//code here
		@endforeach

	@extends('path.layout')

	@section('section_name')
		//html code here
	@endsection

	@yield('section_name')

Query parameter
	accessed by the request function:
		Route::get('/route', function () {
			$var=request('variable_name');
    		return view('View_name');
		});
		

Route parameter (wildcards)
	Route::get('/route{id}', function ($id) {
		
    	return view('View_name');
	});

Creating control in laravel project(from vscode terminal)
	php artisan make::controller PizzaController

Creating Database in laravel project (from terminal)
	add mysql bin folder in PATH variable

	update name of the database in .env file

	Create Table:
		mysql -u root //login in db
		create database pizzahouse;

	Migration 
	{allows us to programaticlly(from our code) define the structure of the table in our db.}
	{migration file are store in the laravel project/database/migrations}
	Creating Migration file using artisan
		php artisan make:migration tablename
	Running Migration
		php artisan migrate
		migrate:fresh        Drop all tables and re-run all migrations
		migrate:install      Create the migration repository
		migrate:refresh      Reset and re-run all migrations
		migrate:reset        Rollback all database migrations
		migrate:rollback     Rollback the last database migration
		migrate:status       Show the status of each migration

Eloquent Models
	an object-relational mapper (ORM) that makes it enjoyable to interact with your database. 
	When using Eloquent, each database table has a corresponding "Model" that is used to interact with that table. 
	Eloquent models allow you to insert, update, and delete records from the table as well.
	
	Models typically live in the app\Models directory and extend the Illuminate\Database\Eloquent\Model class.
	
	Generating Model Classes
		php artisan make:model ModelName
		
		# Generate a model and a FlightMigration class...
			php artisan make:model Flight --migration
			
		# Generate a model and a FlightFactory class...
			php artisan make:model Flight --factory
			php artisan make:model Flight -f

		# Generate a model and a FlightSeeder class...
			php artisan make:model Flight --seed
			php artisan make:model Flight -s

		# Generate a model and a FlightController class...
			php artisan make:model Flight --controller
			php artisan make:model Flight -c
			
		# Generate a model and a migration, factory, seeder, and controller...
			php artisan make:model Flight -mfsc
			
	
	class Flight extends Model
	{
	    /************#Table Names
	    *By convention, the "snake case", plural name of the class will be used as the table name unless another name is explicitly specified.
	    *Manually specify the model's table name by defining a table property on the model:**/
	    	protected $table = 'my_flights';
	    
	    
	    /************#Primary Keys
	    *Eloquent will also assume that each model's corresponding database table has a primary key column named id. 
	    *If necessary, you may define a protected $primaryKey property on your model to specify a different column that serves as your model's primary key:**/
	    	protected $primaryKey = 'flight_id';
	    
	    /*In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that Eloquent will automatically cast the primary key to an integer.
	    *If you wish to use a non-incrementing or a non-numeric primary key you must define a public $incrementing property on your model that is set to false:**/
	    	public $incrementing = false;
	    
	    /*If your model's primary key is not an integer, you should define a protected $keyType property on your model. This property should have a value of string:*/
	    	protected $keyType = 'string';
	    
	    
	    /************#Timestamps
	    *By default, Eloquent expects created_at and updated_at columns to exist on your model's corresponding database table. Eloquent will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by Eloquent, you should define a $timestamps property on your model with a value of false:*/
	    	public $timestamps = false;
	    
	    /*If you need to customize the format of your model's timestamps, set the $dateFormat property on your model. */
	    	protected $dateFormat = 'U';
	    
	    /*If you need to customize the names of the columns used to store the timestamps, you may define CREATED_AT and UPDATED_AT constants on your model:*/
	    	const CREATED_AT = 'creation_date';
    		const UPDATED_AT = 'updated_date';
	    
	    
	    /************#Database Connections
	    *By default, all Eloquent models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a $connection property on the model:*/
	    	protected $connection = 'sqlite';
	    
	    /************#Default Attribute Values
	    *By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an $attributes property on your model:*/
	    	protected $attributes = [
        		'delayed' => false,
    		];
	}
	
	Retrieving Models
		use App\Models\Flight;
		
		Flight::all()	//The model's all method will retrieve all of the records from the model's associated database table
		$flights = Flight::where('active', 1)->orderBy('name')->take(10)->get();	//you may add additional constraints to queries and then invoke the get method to retrieve the results
		

		


Auth. setup
	Installation:
		composer require laravel/ui
		php artisan ui vue --auth
		npm install
		npm run dev

