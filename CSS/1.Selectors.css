/********************** Class Selector ***************************************/
.class_name {
    property: value;
    property: value;
}

/********************** ID Selector ***************************************/
#id_name {
    property: value;
    property: value;
}

/********************** Tag Selector ***************************************/
tag_name {
    property: value;
    property: value;
}

/*************** Specificity of Rules in CSS ******************************
* In CSS, every selector has a different priority.
* Specificity is a measure of how specific a selector's targeting is.
* ID has the highest specificity (100 points),
* CLASS has medium specificity (10 points), and
* ELEMENT has the lowest specificity (1 point).
* A higher specificity selector overrides the rules of selectors with lower specificity.
***********************************************************************/

/**************** Important Declaration *********************************
* The `!important` declaration overrides any other rule, regardless of specificity.
* Use it sparingly as it can make debugging and maintaining the code challenging.
*/
p {
    color: red !important;
}

/*************** Targeting Multiple Elements ***************************/
p, span, a, li, #id, .class {
    property: value;
}

/********* Universal Selector: Targets All Elements ******************/
* {

}

/*********************** Hierarchy *************************************
* Every element nested into another element is the Descendant of the overlapping element.
* Example:
<div id="parent">
  <p></p>
  <div id="child">
    <p></p>
  </div>
</div>
*/

/************** Descendants Selector ********************************/
#parent p {

}

/************ Child Selector ***************************************
  * Selects only direct descendants using the > sign
*/
#parent > p {

}

/*********** Adjacent Selector or Siblings Selector ************************************
	* + Selects the next element/adjacent element
	* Selects elements that share the same parent and are on the same level in the hierarchy.
*/
#parent p + #child {

}
#sibling1 + #sibling2 {
    property: value; /* Define the properties and values for #sibling2 when it directly follows #sibling1 */
}

/************ General Sibling Combinator *****************************
* Selects all elements that are siblings of a specified element.
*/
#sibling1 ~ .siblings {
    property: value; /* Define the properties and values for elements with class "siblings" that are siblings of #sibling1 */
}

/********** Attributes Selector ***********************************
* Selects elements with a specific attribute and value.
* Supports pattern matching (regular expressions):
	^ for starts with
	$ for ends with
	~ for substring
*/
tag_name[attribute="value"] {

}
input[type^="text"] {
    property: value; /* Define the properties and values for input elements with a type attribute starting with "text" */
}

/******** Pseudo Classes ****************************************
* Special keywords that go after selectors.
* Used to target special behavioral states or advanced structural elements.
* Two main groups: Dynamic and Structural.
*/
selector: keyword {

}
/*********** Dynamic Pseudo Classes **********************************
* Based on behavior, allowing styling in relation to user actions.
* Popular ones include:
  - :hover
  - :active
  - :visited
*/
selector: hover {
    property: value; /* Define the properties and values for the hover state of the selector */
}
/*********** Structural Pseudo Classes ********************************
* Advanced structural techniques not possible with ordinary CSS selectors.
* Examples include:
  - :first-child
  - :last-child
  - :first-of-type
  - :last-of-type
  - :nth-child(number)
  - :nth-child(even)
  - :nth-child(odd)
  - :nth-child(formulas)
  - :nth-of-type()
*/
selector: first-child {
    property: value; /* Define the properties and values for the first child of the selector */
}

/************** Combining Selectors *************************
This means select a paragraph tag with class description.
Don't put space in between otherwise it becomes the Descendant selector*/
p.description {

}
